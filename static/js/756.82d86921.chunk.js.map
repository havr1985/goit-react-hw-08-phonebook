{"version":3,"file":"static/js/756.82d86921.chunk.js","mappings":"gPAMe,SAASA,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbC,KAAM,GACNC,MAAO,GACPC,SAAU,IAEZC,iBAAkBC,EAAAA,GAAW,CAC3BJ,KAAMI,EAAAA,KACHC,IAAI,GAAI,iCACRC,SAAS,YACZJ,SAAUE,EAAAA,KACPC,IAAI,GAAI,iCACRC,SAAS,YACZL,MAAOG,EAAAA,KAAaH,MAAM,yBAAyBK,SAAS,cAE9DC,SAAU,SAACC,EAAQC,GACfC,QAAQC,IAAIH,GACZb,GAASiB,EAAAA,EAAAA,IAAcJ,IAEvBC,EAAQI,WAEX,IAEH,OACE,kBAAMN,SAAUV,EAAOiB,aAAvB,WACE,kBAAOC,QAAQ,OAAf,SAAsB,UACtB,kBACEC,GAAG,OACHhB,KAAK,OACLiB,KAAK,OACLC,SAAUrB,EAAOsB,aACjBC,OAAQvB,EAAOwB,WACfC,MAAOzB,EAAOW,OAAOR,OAEtBH,EAAO0B,QAAQvB,MAAQH,EAAO2B,OAAOxB,MACpC,yBAAMH,EAAO2B,OAAOxB,OAClB,MAEJ,kBAAOe,QAAQ,QAAf,SAAuB,mBACvB,kBACEC,GAAG,QACHhB,KAAK,QACLiB,KAAK,QACLC,SAAUrB,EAAOsB,aACjBC,OAAQvB,EAAOwB,WACfC,MAAOzB,EAAOW,OAAOP,QAEtBJ,EAAO0B,QAAQtB,OAASJ,EAAO2B,OAAOvB,OACrC,yBAAMJ,EAAO2B,OAAOvB,QACd,MAER,kBAAOc,QAAQ,WAAf,SAA0B,cAC1B,kBACEC,GAAG,WACHhB,KAAK,WACLiB,KAAK,OACLC,SAAUrB,EAAOsB,aACjBC,OAAQvB,EAAOwB,WACfC,MAAOzB,EAAOW,OAAON,WAEtBL,EAAO0B,QAAQrB,UAAYL,EAAO2B,OAAOtB,UACxC,yBAAML,EAAO2B,OAAOtB,WAClB,MAEJ,mBAAQe,KAAK,SAAb,SAAsB,aAG3B,C","sources":["pages/Register.js"],"sourcesContent":["import React from 'react';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport { useDispatch } from 'react-redux';\nimport { registerThunk } from 'redux/authSlice';\n\nexport default function Register() {\n  const dispatch = useDispatch()  \n  const formik = useFormik({\n    initialValues: {\n      name: '',\n      email: '',\n      password: '',\n    },\n    validationSchema: Yup.object({\n      name: Yup.string()\n        .max(15, 'Must be 15 characters or less')\n        .required('Required'),\n      password: Yup.string()\n        .max(20, 'Must be 20 characters or less')\n        .required('Required'),\n      email: Yup.string().email('Invalid email address').required('Required'),\n    }),\n    onSubmit: (values, actions) => {\n        console.log(values);\n        dispatch(registerThunk(values));\n\n        actions.resetForm()\n        \n    },\n  });\n  return (\n    <form onSubmit={formik.handleSubmit}>\n      <label htmlFor=\"name\">Name</label>\n      <input\n        id=\"name\"\n        name=\"name\"\n        type=\"text\"\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        value={formik.values.name}\n      />\n      {formik.touched.name && formik.errors.name ? (\n        <div>{formik.errors.name}</div>\n      ) : null}\n\n      <label htmlFor=\"email\">Email Address</label>\n      <input\n        id=\"email\"\n        name=\"email\"\n        type=\"email\"\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        value={formik.values.email}\n      />\n      {formik.touched.email && formik.errors.email ? (\n        <div>{formik.errors.email}</div>\n          ) : null}\n          \n      <label htmlFor=\"password\">Password</label>\n      <input\n        id=\"password\"\n        name=\"password\"\n        type=\"text\"\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        value={formik.values.password}\n      />\n      {formik.touched.password && formik.errors.password ? (\n        <div>{formik.errors.password}</div>\n      ) : null}\n\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n};"],"names":["Register","dispatch","useDispatch","formik","useFormik","initialValues","name","email","password","validationSchema","Yup","max","required","onSubmit","values","actions","console","log","registerThunk","resetForm","handleSubmit","htmlFor","id","type","onChange","handleChange","onBlur","handleBlur","value","touched","errors"],"sourceRoot":""}