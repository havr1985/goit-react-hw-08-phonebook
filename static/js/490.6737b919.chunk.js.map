{"version":3,"file":"static/js/490.6737b919.chunk.js","mappings":"0UAOe,SAASA,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbC,MAAO,GACPC,SAAU,IAEZC,iBAAkBC,EAAAA,GAAW,CAC3BF,SAAUE,EAAAA,KACPC,IAAI,GAAI,iCACRC,SAAS,YACZL,MAAOG,EAAAA,KAAaH,MAAM,yBAAyBK,SAAS,cAE9DC,SAAU,SAACC,EAAQC,GACfb,GAASc,EAAAA,EAAAA,IAAWF,IACpBC,EAAQE,WACX,IAGH,OACE,SAAC,IAAD,CAAMC,GAAG,YAAYC,MAAM,SAASC,QAAQ,SAASC,EAAE,QAAvD,UACE,UAAC,KAAD,CAAKC,WAAW,oCAAoCC,EAAG,EAAGC,QAAQ,KAAKC,EAAG,IAA1E,WACE,SAAC,IAAD,CAAMC,GAAG,KAAKC,UAAU,SAASC,SAAU,GAAIC,WAAY,IAAKC,GAAI,EAAGC,MAAM,QAA7E,SAAqF,aACrF,iBAAMlB,SAAUT,EAAO4B,aAAvB,UACE,UAAC,IAAD,CAAQC,QAAS,GAAId,MAAM,aAA3B,WAEG,UAAC,KAAD,CAAae,UAAW9B,EAAO+B,QAAQ5B,OAASH,EAAOgC,OAAO7B,MAA9D,WACG,SAAC,IAAD,CAAW8B,QAAQ,QAAnB,SAA2B,mBACzB,SAAC,EAAAC,EAAD,CACEC,GAAG,QACHC,KAAK,QACLC,KAAK,QACLC,SAAUtC,EAAOuC,aACjBC,OAAQxC,EAAOyC,WACfC,MAAO1C,EAAOU,OAAOP,SAEzB,SAAC,KAAD,UAAmBH,EAAOgC,OAAO7B,YAGrC,UAAC,KAAD,CAAa2B,UAAW9B,EAAO+B,QAAQ3B,UAAYJ,EAAOgC,OAAO5B,SAAjE,WACE,SAAC,IAAD,CAAW6B,QAAQ,WAAnB,SAA8B,cAC5B,SAAC,EAAAC,EAAD,CACIC,GAAG,WACHC,KAAK,WACLC,KAAK,OACLC,SAAUtC,EAAOuC,aACjBC,OAAQxC,EAAOyC,WACfC,MAAO1C,EAAOU,OAAON,YAE3B,SAAC,KAAD,UAAmBJ,EAAOgC,OAAO5B,eAGnC,SAAC,IAAD,CAAQiC,KAAK,SAASM,YAAY,OAAOhB,MAAM,QAAQiB,MAAM,OAA7D,SAAoE,qBAM/E,C","sources":["pages/Login.js"],"sourcesContent":["import React from 'react';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport { useDispatch } from 'react-redux';\nimport { loginThunk } from 'redux/authSlice';\nimport { Box, Button, Flex, FormControl, FormErrorMessage, FormLabel, Input, Text, VStack } from '@chakra-ui/react';\n\nexport default function Register() {\n  const dispatch = useDispatch()  \n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      password: '',\n    },\n    validationSchema: Yup.object({\n      password: Yup.string()\n        .max(20, 'Must be 20 characters or less')\n        .required('Required'),\n      email: Yup.string().email('Invalid email address').required('Required'),\n    }),\n    onSubmit: (values, actions) => {\n        dispatch(loginThunk(values));\n        actions.resetForm()  \n    },\n  });\n  \n  return (\n    <Flex bg=\"green.100\" align=\"center\" justify=\"center\" h=\"100vh\">\n      <Box bgGradient='linear(to-r, green.200, pink.500)' p={6} rounded=\"md\" w={400} >\n        <Text as='h2' textAlign='center' fontSize={30} fontWeight={700} mb={4} color='white'>SIGN IN</Text>\n        <form onSubmit={formik.handleSubmit}>\n          <VStack spacing={10} align=\"flex-start\">\n\n             <FormControl isInvalid={formik.touched.email && formik.errors.email}>\n                <FormLabel htmlFor=\"email\">Email Address</FormLabel>\n                  <Input\n                    id=\"email\"\n                    name=\"email\"\n                    type=\"email\"\n                    onChange={formik.handleChange}\n                    onBlur={formik.handleBlur}\n                    value={formik.values.email}\n                  />\n                <FormErrorMessage>{formik.errors.email}</FormErrorMessage>\n              </FormControl>\n            \n            <FormControl isInvalid={formik.touched.password && formik.errors.password}>    \n              <FormLabel htmlFor=\"password\">Password</FormLabel>\n                <Input\n                    id=\"password\"\n                    name=\"password\"\n                    type=\"text\"\n                    onChange={formik.handleChange}\n                    onBlur={formik.handleBlur}\n                    value={formik.values.password}\n                />\n              <FormErrorMessage>{formik.errors.password}</FormErrorMessage>\n            </FormControl> \n\n            <Button type=\"submit\" colorScheme='pink' color='white' width='full'>SIGN IN</Button>\n            </VStack>\n        </form>\n      </Box>\n     </Flex>\n  );\n};"],"names":["Register","dispatch","useDispatch","formik","useFormik","initialValues","email","password","validationSchema","Yup","max","required","onSubmit","values","actions","loginThunk","resetForm","bg","align","justify","h","bgGradient","p","rounded","w","as","textAlign","fontSize","fontWeight","mb","color","handleSubmit","spacing","isInvalid","touched","errors","htmlFor","I","id","name","type","onChange","handleChange","onBlur","handleBlur","value","colorScheme","width"],"sourceRoot":""}