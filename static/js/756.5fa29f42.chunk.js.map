{"version":3,"file":"static/js/756.5fa29f42.chunk.js","mappings":"yUAQe,SAASA,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbC,KAAM,GACNC,MAAO,GACPC,SAAU,IAEZC,iBAAkBC,EAAAA,GAAW,CAC3BJ,KAAMI,EAAAA,KACHC,IAAI,EAAG,wCACPC,SAAS,YACZJ,SAAUE,EAAAA,KACPC,IAAI,EAAG,wCACPC,SAAS,YACZL,MAAOG,EAAAA,KAAaH,MAAM,yBAAyBK,SAAS,cAE9DC,SAAU,SAACC,EAAQC,GACfC,QAAQC,IAAIH,GACZb,GAASiB,EAAAA,EAAAA,IAAcJ,IAEvBC,EAAQI,WAEX,IAEH,OACE,SAAC,IAAD,CAAMC,GAAG,YAAYC,MAAM,SAASC,QAAQ,SAASC,EAAE,QAAvD,UACE,UAAC,KAAD,CAAKC,WAAW,oCAAoCC,EAAG,EAAGC,QAAQ,KAAKC,EAAG,IAA1E,WACE,SAAC,IAAD,CAAMC,GAAG,KAAKC,UAAU,SAASC,SAAU,GAAIC,WAAY,IAAKC,GAAI,EAAGC,MAAM,QAA7E,SAAqF,aACrF,iBAAMpB,SAAUV,EAAO+B,aAAvB,UACE,UAAC,IAAD,CAAQC,QAAS,GAAId,MAAM,aAA3B,WACE,UAAC,KAAD,CAAae,UAAWjC,EAAOkC,QAAQ/B,MAAQH,EAAOmC,OAAOhC,KAA7D,WACA,SAAC,IAAD,CAAWiC,QAAQ,OAAnB,SAA0B,UACxB,SAAC,EAAAC,EAAD,CACEC,GAAG,OACHnC,KAAK,OACLoC,KAAK,OACLC,SAAUxC,EAAOyC,aACjBC,OAAQ1C,EAAO2C,WACfC,MAAO5C,EAAOW,OAAOR,QAEzB,SAAC,KAAD,UAAmBH,EAAOmC,OAAOhC,WAGjC,UAAC,KAAD,CAAa8B,UAAWjC,EAAOkC,QAAQ9B,OAASJ,EAAOmC,OAAO/B,MAA9D,WACA,SAAC,IAAD,CAAWgC,QAAQ,QAAnB,SAA2B,mBACzB,SAAC,EAAAC,EAAD,CACEC,GAAG,QACHnC,KAAK,QACLoC,KAAK,QACLC,SAAUxC,EAAOyC,aACjBC,OAAQ1C,EAAO2C,WACfC,MAAO5C,EAAOW,OAAOP,SAEzB,SAAC,KAAD,UAAmBJ,EAAOmC,OAAO/B,YAGjC,UAAC,KAAD,CAAa6B,UAAWjC,EAAOkC,QAAQ7B,UAAYL,EAAOmC,OAAO9B,SAAjE,WACA,SAAC,IAAD,CAAW+B,QAAQ,WAAnB,SAA8B,cAC5B,SAAC,EAAAC,EAAD,CACEC,GAAG,WACHnC,KAAK,WACLoC,KAAK,OACLC,SAAUxC,EAAOyC,aACjBC,OAAQ1C,EAAO2C,WACfC,MAAO5C,EAAOW,OAAON,YAEzB,SAAC,KAAD,UAAmBL,EAAOmC,OAAO9B,eAGjC,SAAC,IAAD,CAAQkC,KAAK,SAASM,YAAY,OAAOf,MAAM,QAAQgB,MAAM,OAA7D,SAAqE,qBAMhF,C","sources":["pages/Register.js"],"sourcesContent":["import React from 'react';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport { useDispatch } from 'react-redux';\nimport { registerThunk } from 'redux/authSlice';\nimport { Box, Button, Flex, FormControl, FormErrorMessage, FormLabel, Input, Text, VStack } from '@chakra-ui/react';\n\n\nexport default function Register() {\n  const dispatch = useDispatch()  \n  const formik = useFormik({\n    initialValues: {\n      name: '',\n      email: '',\n      password: '',\n    },\n    validationSchema: Yup.object({\n      name: Yup.string()\n        .min(3, 'Must be minimum 3 characters or less')\n        .required('Required'),\n      password: Yup.string()\n        .min(7, 'Must be minimum 7 characters or less')\n        .required('Required'),\n      email: Yup.string().email('Invalid email address').required('Required'),\n    }),\n    onSubmit: (values, actions) => {\n        console.log(values);\n        dispatch(registerThunk(values));\n\n        actions.resetForm()\n        \n    },\n  });\n  return (\n    <Flex bg=\"green.100\" align=\"center\" justify=\"center\" h=\"100vh\">\n      <Box bgGradient='linear(to-r, green.200, pink.500)' p={6} rounded=\"md\" w={400} >\n        <Text as='h2' textAlign='center' fontSize={30} fontWeight={700} mb={4} color='white'>SIGN UP</Text>\n        <form onSubmit={formik.handleSubmit}>\n          <VStack spacing={10} align=\"flex-start\">\n            <FormControl isInvalid={formik.touched.name && formik.errors.name}>\n            <FormLabel htmlFor=\"name\">Name</FormLabel>\n              <Input\n                id=\"name\"\n                name=\"name\"\n                type=\"text\"\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                value={formik.values.name}\n              />\n            <FormErrorMessage>{formik.errors.name}</FormErrorMessage>\n            </FormControl>\n            \n            <FormControl isInvalid={formik.touched.email && formik.errors.email}>\n            <FormLabel htmlFor=\"email\">Email Address</FormLabel>\n              <Input\n                id=\"email\"\n                name=\"email\"\n                type=\"email\"\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                value={formik.values.email}\n              />\n            <FormErrorMessage>{formik.errors.email}</FormErrorMessage>\n            </FormControl>\n\n            <FormControl isInvalid={formik.touched.password && formik.errors.password}>    \n            <FormLabel htmlFor=\"password\">Password</FormLabel>\n              <Input\n                id=\"password\"\n                name=\"password\"\n                type=\"text\"\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                value={formik.values.password}\n              />\n            <FormErrorMessage>{formik.errors.password}</FormErrorMessage>\n            </FormControl> \n\n            <Button type=\"submit\" colorScheme='pink' color='white' width='full' >SIGN UP</Button>\n          </VStack>\n        </form>\n      </Box>\n    </Flex>\n  );\n};"],"names":["Register","dispatch","useDispatch","formik","useFormik","initialValues","name","email","password","validationSchema","Yup","min","required","onSubmit","values","actions","console","log","registerThunk","resetForm","bg","align","justify","h","bgGradient","p","rounded","w","as","textAlign","fontSize","fontWeight","mb","color","handleSubmit","spacing","isInvalid","touched","errors","htmlFor","I","id","type","onChange","handleChange","onBlur","handleBlur","value","colorScheme","width"],"sourceRoot":""}